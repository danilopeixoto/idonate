// Copyright (c) 2019, Bruno Caputo, Danilo Peixoto and Heitor Toledo.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
package idonate.view;

import idonate.model.Blood;
import idonate.model.Blood.BloodType;
import idonate.model.BoneMarrow;
import idonate.model.Organ;
import idonate.model.Organ.OrganType;
import idonate.model.Resource;
import java.text.ParseException;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

import java.sql.Date;

/**
 *
 * @author Heitor
 */
public class ResourceEditor extends javax.swing.JFrame {
    public static Resource resource;
    
    /**
     * Creates new form PersonEditor
     */
    public ResourceEditor() {
        this.initComponents();
        
        try {
            MaskFormatter cpfMask = new MaskFormatter("###.###.###-##");
            cpfMask.setPlaceholderCharacter('0');
            
            MaskFormatter dateMask = new MaskFormatter("##/##/####");
            dateMask.setPlaceholderCharacter('0');
            
            MaskFormatter numberMask = new MaskFormatter("##########");
            
            formattedTextAcceptorCPFBlood.setFormatterFactory(
                    new DefaultFormatterFactory(cpfMask));
            
            formattedTextAcceptorCPFOrgan.setFormatterFactory(
                    new DefaultFormatterFactory(cpfMask));
            
            formattedTextAcceptorCPFBoneMarrow.setFormatterFactory(
                    new DefaultFormatterFactory(cpfMask));
            
            formattedTextHLABoneMarrow.setFormatterFactory(
                    new DefaultFormatterFactory(numberMask));
            
            formattedTextREDOMEBoneMarrow.setFormatterFactory(
                    new DefaultFormatterFactory(numberMask));
        }
        catch (ParseException exception) {
            exception.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupResource = new javax.swing.ButtonGroup();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        labelIcon = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        tabbedPane = new javax.swing.JTabbedPane();
        panelBlood = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        datePickerDonationBlood = new org.jdesktop.swingx.JXDatePicker();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textAreaDescriptionBlood = new javax.swing.JTextArea();
        jLabel23 = new javax.swing.JLabel();
        comboBoxTypeBlood = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        spinnerVolumeBlood = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        formattedTextAcceptorCPFBlood = new javax.swing.JFormattedTextField();
        jLabel26 = new javax.swing.JLabel();
        datePickerAcceptionBlood = new org.jdesktop.swingx.JXDatePicker();
        panelOrgan = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        datePickerDonationOrgan = new org.jdesktop.swingx.JXDatePicker();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaDescriptionOrgan = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        comboBoxTypeOrgan = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        spinnerWeightOrgan = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        formattedTextAcceptorCPFOrgan = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();
        datePickerAcceptionOrgan = new org.jdesktop.swingx.JXDatePicker();
        panelBoneMarrow = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        datePickerDonationBoneMarrow = new org.jdesktop.swingx.JXDatePicker();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaDescriptionBoneMarrow = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        formattedTextHLABoneMarrow = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        formattedTextREDOMEBoneMarrow = new javax.swing.JFormattedTextField();
        jLabel19 = new javax.swing.JLabel();
        formattedTextAcceptorCPFBoneMarrow = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        datePickerAcceptionBoneMarrow = new org.jdesktop.swingx.JXDatePicker();
        footer = new javax.swing.JPanel();
        buttonDone = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("iDonate");
        setResizable(false);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        labelIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/plus.png"))); // NOI18N
        labelIcon.setMaximumSize(new java.awt.Dimension(300, 300));
        labelIcon.setMinimumSize(new java.awt.Dimension(300, 300));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(labelIcon, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("iDonate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Resource");
        jLabel8.setMinimumSize(new java.awt.Dimension(150, 26));
        jLabel8.setPreferredSize(new java.awt.Dimension(150, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -33;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 7, 6, 6);
        jPanel4.add(jLabel8, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridLayout(1, 3, 5, 5));

        buttonGroupResource.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Sangue");
        jRadioButton1.setActionCommand("0");
        jRadioButton1.setMinimumSize(null);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceTypeChanged(evt);
            }
        });
        jPanel5.add(jRadioButton1);

        buttonGroupResource.add(jRadioButton2);
        jRadioButton2.setText("Órgão");
        jRadioButton2.setActionCommand("1");
        jRadioButton2.setMinimumSize(null);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceTypeChanged(evt);
            }
        });
        jPanel5.add(jRadioButton2);

        buttonGroupResource.add(jRadioButton3);
        jRadioButton3.setText("Medula Óssea");
        jRadioButton3.setActionCommand("2");
        jRadioButton3.setMinimumSize(null);
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceTypeChanged(evt);
            }
        });
        jPanel5.add(jRadioButton3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 134;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 7, 6, 6);
        jPanel4.add(jPanel5, gridBagConstraints);

        tabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        tabbedPane.setAutoscrolls(true);

        panelBlood.setLayout(new java.awt.GridBagLayout());

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Data de Doação");
        jLabel21.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel21.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(jLabel21, gridBagConstraints);

        datePickerDonationBlood.setPreferredSize(new java.awt.Dimension(270, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(datePickerDonationBlood, gridBagConstraints);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Descrição");
        jLabel22.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel22.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(jLabel22, gridBagConstraints);

        textAreaDescriptionBlood.setColumns(20);
        textAreaDescriptionBlood.setRows(5);
        textAreaDescriptionBlood.setPreferredSize(new java.awt.Dimension(260, 26));
        jScrollPane5.setViewportView(textAreaDescriptionBlood);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(jScrollPane5, gridBagConstraints);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Tipo");
        jLabel23.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel23.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(jLabel23, gridBagConstraints);

        comboBoxTypeBlood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "A-", "AB+", "AB-", "B+", "B-", "O+", "O-" }));
        comboBoxTypeBlood.setPreferredSize(new java.awt.Dimension(270, 26));
        comboBoxTypeBlood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTypeBloodActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(comboBoxTypeBlood, gridBagConstraints);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Volume");
        jLabel24.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel24.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(jLabel24, gridBagConstraints);

        spinnerVolumeBlood.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 0.01f));
        spinnerVolumeBlood.setPreferredSize(new java.awt.Dimension(270, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(spinnerVolumeBlood, gridBagConstraints);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Data de Aceitação");
        jLabel25.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel25.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(jLabel25, gridBagConstraints);

        formattedTextAcceptorCPFBlood.setPreferredSize(new java.awt.Dimension(270, 26));
        formattedTextAcceptorCPFBlood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formattedTextAcceptorCPFBloodActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(formattedTextAcceptorCPFBlood, gridBagConstraints);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("CPF do Receptor");
        jLabel26.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel26.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(jLabel26, gridBagConstraints);

        datePickerAcceptionBlood.setPreferredSize(new java.awt.Dimension(270, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBlood.add(datePickerAcceptionBlood, gridBagConstraints);

        tabbedPane.addTab("Sangue", panelBlood);

        panelOrgan.setLayout(new java.awt.GridBagLayout());

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Data de Doação");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel9.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(jLabel9, gridBagConstraints);

        datePickerDonationOrgan.setPreferredSize(new java.awt.Dimension(270, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(datePickerDonationOrgan, gridBagConstraints);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Descrição");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel10.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(jLabel10, gridBagConstraints);

        textAreaDescriptionOrgan.setColumns(20);
        textAreaDescriptionOrgan.setRows(5);
        textAreaDescriptionOrgan.setPreferredSize(new java.awt.Dimension(260, 26));
        jScrollPane3.setViewportView(textAreaDescriptionOrgan);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(jScrollPane3, gridBagConstraints);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Tipo");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel11.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(jLabel11, gridBagConstraints);

        comboBoxTypeOrgan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Coração", "Córnea", "Fígado", "Intestino", "Osso", "Pâncreas", "Pele", "Pulmões", "Rins", "Tendão", "Veia" }));
        comboBoxTypeOrgan.setPreferredSize(new java.awt.Dimension(270, 26));
        comboBoxTypeOrgan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTypeOrganActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(comboBoxTypeOrgan, gridBagConstraints);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Peso");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel12.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(jLabel12, gridBagConstraints);

        spinnerWeightOrgan.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 0.01f));
        spinnerWeightOrgan.setPreferredSize(new java.awt.Dimension(270, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(spinnerWeightOrgan, gridBagConstraints);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Data de Aceitação");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel13.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(jLabel13, gridBagConstraints);

        formattedTextAcceptorCPFOrgan.setPreferredSize(new java.awt.Dimension(270, 26));
        formattedTextAcceptorCPFOrgan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formattedTextAcceptorCPFOrganActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(formattedTextAcceptorCPFOrgan, gridBagConstraints);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("CPF do Receptor");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel14.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(jLabel14, gridBagConstraints);

        datePickerAcceptionOrgan.setPreferredSize(new java.awt.Dimension(270, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelOrgan.add(datePickerAcceptionOrgan, gridBagConstraints);

        tabbedPane.addTab("Órgão", panelOrgan);

        panelBoneMarrow.setLayout(new java.awt.GridBagLayout());

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Data de Doação");
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel15.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(jLabel15, gridBagConstraints);

        datePickerDonationBoneMarrow.setPreferredSize(new java.awt.Dimension(270, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(datePickerDonationBoneMarrow, gridBagConstraints);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Descrição");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel16.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(jLabel16, gridBagConstraints);

        textAreaDescriptionBoneMarrow.setColumns(20);
        textAreaDescriptionBoneMarrow.setRows(5);
        textAreaDescriptionBoneMarrow.setPreferredSize(new java.awt.Dimension(260, 26));
        jScrollPane2.setViewportView(textAreaDescriptionBoneMarrow);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(jScrollPane2, gridBagConstraints);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("HLA");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel17.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(jLabel17, gridBagConstraints);

        formattedTextHLABoneMarrow.setPreferredSize(new java.awt.Dimension(270, 26));
        formattedTextHLABoneMarrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formattedTextHLABoneMarrowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(formattedTextHLABoneMarrow, gridBagConstraints);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("REDOME");
        jLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel18.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(jLabel18, gridBagConstraints);

        formattedTextREDOMEBoneMarrow.setPreferredSize(new java.awt.Dimension(270, 26));
        formattedTextREDOMEBoneMarrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formattedTextREDOMEBoneMarrowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(formattedTextREDOMEBoneMarrow, gridBagConstraints);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Data de Aceitação");
        jLabel19.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel19.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(jLabel19, gridBagConstraints);

        formattedTextAcceptorCPFBoneMarrow.setPreferredSize(new java.awt.Dimension(270, 26));
        formattedTextAcceptorCPFBoneMarrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formattedTextAcceptorCPFBoneMarrowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(formattedTextAcceptorCPFBoneMarrow, gridBagConstraints);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("CPF do Receptor");
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel20.setPreferredSize(new java.awt.Dimension(150, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(jLabel20, gridBagConstraints);

        datePickerAcceptionBoneMarrow.setPreferredSize(new java.awt.Dimension(270, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBoneMarrow.add(datePickerAcceptionBoneMarrow, gridBagConstraints);

        tabbedPane.addTab("Medula Óssea", panelBoneMarrow);

        jLayeredPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(tabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(383, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(116, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(340, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(154, Short.MAX_VALUE)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        footer.setLayout(new java.awt.GridLayout(1, 2, 5, 10));

        buttonDone.setText("Concluir");
        buttonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDoneActionPerformed(evt);
            }
        });
        footer.add(buttonDone);

        buttonCancel.setText("Cancelar");
        footer.add(buttonCancel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(footer, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(458, Short.MAX_VALUE)
                .addComponent(footer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxTypeOrganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTypeOrganActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxTypeOrganActionPerformed

    private void formattedTextAcceptorCPFOrganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formattedTextAcceptorCPFOrganActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formattedTextAcceptorCPFOrganActionPerformed

    private void formattedTextHLABoneMarrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formattedTextHLABoneMarrowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formattedTextHLABoneMarrowActionPerformed

    private void formattedTextAcceptorCPFBoneMarrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formattedTextAcceptorCPFBoneMarrowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formattedTextAcceptorCPFBoneMarrowActionPerformed

    private void formattedTextREDOMEBoneMarrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formattedTextREDOMEBoneMarrowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formattedTextREDOMEBoneMarrowActionPerformed

    private void resourceTypeChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceTypeChanged
        String selectedOption = this.buttonGroupResource.getSelection().getActionCommand();
        
        switch(selectedOption) {
            case "0":
                this.tabbedPane.setSelectedIndex(0);
                break;
            case "1":
                this.tabbedPane.setSelectedIndex(1);
                break;
            case "2":
                this.tabbedPane.setSelectedIndex(2);
                break;
        }
    }//GEN-LAST:event_resourceTypeChanged

    private void comboBoxTypeBloodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTypeBloodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxTypeBloodActionPerformed

    private void formattedTextAcceptorCPFBloodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formattedTextAcceptorCPFBloodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formattedTextAcceptorCPFBloodActionPerformed

    private void buttonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDoneActionPerformed
        resource = null;
        switch (this.tabbedPane.getSelectedIndex()) {
            case 0: {
                final Blood blood = new Blood();
                
                final Date date = new Date(this.datePickerDonationBlood.getDate().getTime());
                final String description = this.textAreaDescriptionBlood.getText();
                final BloodType bloodType = Utils.comboBoxIndexToBloodType(this.comboBoxTypeBlood.getSelectedIndex());
                
                final float volume = Float.parseFloat(this.spinnerVolumeBlood.getValue().toString());
                final String cpf = this.formattedTextAcceptorCPFBlood.getText();
                if (this.datePickerAcceptionBlood.getDate() != null) {
                    final Date acceptionDate = new Date(this.datePickerAcceptionBlood.getDate().getTime());
                    blood.setAcceptationDate(acceptionDate);
                }
                
                blood.setAcceptorCPF(cpf);
                blood.setBloodType(bloodType);
                blood.setDescription(description);
                blood.setDonationDate(date);
                blood.setVolume(volume);
                resource = blood;
                break;
            }

            case 1: {
                final Organ organ = new Organ();
                
                final Date date = new Date(this.datePickerDonationOrgan.getDate().getTime());
                final String description = this.textAreaDescriptionOrgan.getText();
                final OrganType organType = Utils.comboBoxIndexToOrganType(this.comboBoxTypeOrgan.getSelectedIndex());
                
                final float weight = Float.parseFloat(this.spinnerWeightOrgan.getValue().toString());
                final String cpf = this.formattedTextAcceptorCPFOrgan.getText();
                if (this.datePickerAcceptionOrgan.getDate() != null) {
                    final Date acceptionDate = new Date(this.datePickerAcceptionOrgan.getDate().getTime());
                    organ.setAcceptationDate(acceptionDate);
                }
                
                organ.setAcceptorCPF(cpf);
                organ.setDescription(description);
                organ.setDonationDate(date);
                organ.setType(organType);
                organ.setWeight(weight);
                resource = organ;
                break;
            }

            case 2: {
                final BoneMarrow bm = new BoneMarrow();
                
                final Date date = new Date(this.datePickerDonationBoneMarrow.getDate().getTime());
                final String description = this.textAreaDescriptionBoneMarrow.getText();
                final String hla = this.formattedTextHLABoneMarrow.getText();
                final String redome = this.formattedTextREDOMEBoneMarrow.getText();
                final String cpf = this.formattedTextAcceptorCPFBoneMarrow.getText();
                if (this.datePickerAcceptionBoneMarrow.getDate() != null) {
                    final Date acceptionDate = new Date(this.datePickerAcceptionBoneMarrow.getDate().getTime());
                    bm.setAcceptationDate(acceptionDate);
                }
                
                bm.setAcceptorCPF(cpf);
                bm.setDescription(description);
                bm.setDonationDate(date);
                bm.setHLA(hla);
                bm.setREDOME(redome);
                resource = bm;
                break;
            }

            default:
                throw new UnsupportedOperationException();
        }
        
        this.dispose();
    }//GEN-LAST:event_buttonDoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResourceEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResourceEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResourceEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResourceEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResourceEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonDone;
    private javax.swing.ButtonGroup buttonGroupResource;
    private javax.swing.JComboBox<String> comboBoxTypeBlood;
    private javax.swing.JComboBox<String> comboBoxTypeOrgan;
    private org.jdesktop.swingx.JXDatePicker datePickerAcceptionBlood;
    private org.jdesktop.swingx.JXDatePicker datePickerAcceptionBoneMarrow;
    private org.jdesktop.swingx.JXDatePicker datePickerAcceptionOrgan;
    private org.jdesktop.swingx.JXDatePicker datePickerDonationBlood;
    private org.jdesktop.swingx.JXDatePicker datePickerDonationBoneMarrow;
    private org.jdesktop.swingx.JXDatePicker datePickerDonationOrgan;
    private javax.swing.JPanel footer;
    private javax.swing.JFormattedTextField formattedTextAcceptorCPFBlood;
    private javax.swing.JFormattedTextField formattedTextAcceptorCPFBoneMarrow;
    private javax.swing.JFormattedTextField formattedTextAcceptorCPFOrgan;
    private javax.swing.JFormattedTextField formattedTextHLABoneMarrow;
    private javax.swing.JFormattedTextField formattedTextREDOMEBoneMarrow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel labelIcon;
    private javax.swing.JPanel panelBlood;
    private javax.swing.JPanel panelBoneMarrow;
    private javax.swing.JPanel panelOrgan;
    private javax.swing.JSpinner spinnerVolumeBlood;
    private javax.swing.JSpinner spinnerWeightOrgan;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextArea textAreaDescriptionBlood;
    private javax.swing.JTextArea textAreaDescriptionBoneMarrow;
    private javax.swing.JTextArea textAreaDescriptionOrgan;
    // End of variables declaration//GEN-END:variables
}
